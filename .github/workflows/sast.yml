# .github/workflows/sast.yml

name: Seguridad SAST con Bandit y Semgrep

on: [push, pull_request]

jobs:
  seguridad:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repo
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependencias SAST
        run: |
          pip install bandit semgrep

      - name: Ejecutar Bandit (backend)
        run: |
          bandit -r backend/ -f txt -o bandit_resultados.txt || true

      - name: Ejecutar Semgrep (backend y frontend)
        run: |
          semgrep scan \
            --config "p/ci" \
            --include 'backend/**/*.py' \
            --include 'frontend/**/*.[jt]s' \
            --include 'frontend/**/*.[jt]sx' \
            --include 'frontend/Dockerfile' \
            --include 'backend/Dockerfile' \
            --verbose \
            -o semgrep_resultados.txt

      - name: Subir artefactos SAST
        uses: actions/upload-artifact@v4
        with:
          name: resultados-sast
          path: |
            bandit_resultados.txt
            semgrep_resultados.txt

  docker-compose-test:
    name: Levantar Docker Compose + Smoke Test
    runs-on: ubuntu-latest
    needs: seguridad

    # ——————————————————————————————————————————————————————————————————————
    # Aquí inyectamos todos los secretos que tu docker-compose requiere
    # ——————————————————————————————————————————————————————————————————————
    env:
      # Credenciales AWS (aunque sean dummy, para que no falle Docker Compose)
      AWS_ACCESS_KEY_ID:      ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN:      ${{ secrets.AWS_SESSION_TOKEN }}

      # Claves Stripe (pueden ser de prueba)
      STRIPE_SECRET_KEY:      ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_WEBHOOK_SECRET:  ${{ secrets.STRIPE_WEBHOOK_SECRET }}
    # ——————————————————————————————————————————————————————————————————————

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Instalar Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Levantar contenedores con Docker Compose
        run: |
          # Forzamos que Docker Compose construya imágenes limpias:
          docker-compose -f docker-compose.yml up -d --build

      - name: Esperar a que los servicios estén listos
        run: |
          # Ajusta el sleep si tu base de datos o backend tardan más en arrancar
          sleep 20

      - name: Smoke test → /health
        run: |
          HTTP_CODE=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:8000/health)
          echo "→ Respuesta /health: $HTTP_CODE"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Error: /health devolvió $HTTP_CODE en lugar de 200."
            exit 1
          fi

      - name: Smoke test → /docs
        run: |
          HTTP_CODE=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:8000/docs)
          echo "→ Respuesta /docs: $HTTP_CODE"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Error: /docs devolvió $HTTP_CODE en lugar de 200."
            exit 1
          fi

      - name: Descargar logs del backend (opcional, para depuración)
        run: |
          docker-compose logs backend || true

      - name: Bajar contenedores Docker Compose
        if: always()
        run: |
          docker-compose -f docker-compose.yml down --remove-orphans
