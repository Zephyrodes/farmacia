# .github/workflows/sast.yml

name: Seguridad SAST con Bandit y Semgrep

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  seguridad:
    name: Ejecutar SAST (Bandit + Semgrep)
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repo
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependencias SAST
        run: |
          pip install bandit semgrep

      - name: Ejecutar Bandit (backend)
        run: |
          bandit -r backend/ -f txt -o bandit_resultados.txt || true

      - name: Ejecutar Semgrep (backend y frontend)
        run: |
          semgrep scan \
            --config "p/ci" \
            --include 'backend/**/*.py' \
            --include 'frontend/**/*.[jt]s' \
            --include 'frontend/**/*.[jt]sx' \
            --include 'frontend/Dockerfile' \
            --include 'backend/Dockerfile' \
            --verbose \
            -o semgrep_resultados.txt

      - name: Subir artefactos SAST
        uses: actions/upload-artifact@v4
        with:
          name: resultados-sast
          path: |
            bandit_resultados.txt
            semgrep_resultados.txt

  docker-compose-test:
    name: Levantar Docker Compose + Smoke Test (sin exponer puertos)
    runs-on: ubuntu-latest
    needs: seguridad

    env:
      # Aunque sean valores “dummy”, debemos inyectar algo para que no falle docker-compose
      AWS_ACCESS_KEY_ID:      ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN:      ${{ secrets.AWS_SESSION_TOKEN }}
      STRIPE_SECRET_KEY:      ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_WEBHOOK_SECRET:  ${{ secrets.STRIPE_WEBHOOK_SECRET }}

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Instalar Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Levantar contenedores con Docker Compose
        run: |
          # Primero bajamos contenedores huérfanos (si los hubiera)
          docker-compose -f docker-compose.yml down --remove-orphans || true
          # Luego arrancamos en modo detached (sin exponer puertos)
          docker-compose -f docker-compose.yml up -d --build

      - name: Esperar a que los servicios estén listos
        run: |
          # Ajusta este sleep según tu entorno; por ejemplo, 30 s si la DB tarda en inicializar
          sleep 30

      - name: Verificar contenedores activos (para debug)
        run: docker ps -a

      #######################################################################
      # Ahora ejecutamos los “smoke tests” DENTRO del contenedor “backend”  #
      # Usamos `docker-compose exec backend` para invocar curl sobre 8000   #
      #######################################################################

      - name: Smoke test → /docs (dentro de contenedor)
        run: |
          # Nota: asumimos que Uvicorn corre en el contenedor "backend" en el puerto 8000 sin exponerlo.
          # Usamos docker-compose exec para lanzar curl dentro del container.
          docker-compose exec backend \
            sh -c "curl -o /dev/null -s -w \"%{http_code}\" http://127.0.0.1:8000/docs" \
            > respuesta_docs.txt
          DOC_CODE=$(cat respuesta_docs.txt)
          echo "→ Código HTTP /docs desde dentro del contenedor: $DOC_CODE"
          if [ "$DOC_CODE" != "200" ]; then
            echo "Error: /docs devolvió $DOC_CODE (dentro del contenedor)."
            # Imprimimos logs del contenedor backend para depuración
            docker-compose logs backend || true
            exit 1
          fi

      - name: Smoke test → /openapi.json (dentro de contenedor)
        run: |
          # Verificamos también que la especificación OpenAPI esté accesible.
          docker-compose exec backend \
            sh -c "curl -o /dev/null -s -w \"%{http_code}\" http://127.0.0.1:8000/openapi.json" \
            > respuesta_openapi.txt
          OAPI_CODE=$(cat respuesta_openapi.txt)
          echo "→ Código HTTP /openapi.json dentro del contenedor: $OAPI_CODE"
          if [ "$OAPI_CODE" != "200" ]; then
            echo "Error: /openapi.json devolvió $OAPI_CODE (dentro del contenedor)."
            docker-compose logs backend || true
            exit 1
          fi

      - name: (Opcional) Logs finales del backend
        if: failure()
        run: |
          echo "===== LOGS DEL CONTENEDOR BACKEND ====="
          docker-compose logs backend || true

      - name: Bajar contenedores Docker Compose
        if: always()
        run: |
          docker-compose -f docker-compose.yml down --remove-orphans
